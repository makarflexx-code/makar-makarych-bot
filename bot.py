# -*- coding: utf-8 -*-
# –ú–∞–∫–∞—Ä –ú–∞–∫–∞—Ä—ã—á ‚Äî —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –ë—É–ª–∫–∏–ü–µ—á—å (OpenRouter edition)
# –£—Å—Ç–æ–π—á–∏–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã (VPS / Render / Linux / Windows)
# ---------------------------------------------------------------
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
#   pip install --upgrade python-telegram-bot openai
# ---------------------------------------------------------------

import os
import json
import asyncio
import logging
from pathlib import Path
from typing import Dict, Any, List
from telegram import (
    Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, CallbackQueryHandler, filters
)

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(message)s",
    level=logging.INFO,
    handlers=[logging.FileHandler("bot.log", encoding="utf-8"), logging.StreamHandler()]
)
logger = logging.getLogger("–ë—É–ª–∫–∏–ü–µ—á—å")

# === –ü–£–¢–ò ===
BASE = Path(__file__).parent
MESSAGES_PATH = BASE / "messages.json"
PRICE_PATH = BASE / "price.json"
MEDIA_DIR = BASE / "media"

# === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ===
with open(MESSAGES_PATH, "r", encoding="utf-8") as f:
    MSG = json.load(f)

try:
    with open(PRICE_PATH, "r", encoding="utf-8") as f:
        PRICE: Dict[str, List[Dict[str, Any]]] = json.load(f)
except FileNotFoundError:
    PRICE = {}

# === –ú–ï–ù–Æ ===
MENU_BUTTONS = [
    ["–û–±—É—á–µ–Ω–∏–µ", "–¶–µ–Ω–Ω–æ—Å—Ç–∏", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è"],
    ["–§—Ä–∞–∑—ã", "–§–∏–ª–æ—Å–æ—Ñ–∏—è", "–û –±—Ä–µ–Ω–¥–µ"],
    ["–ö–∞—Ç–∞–ª–æ–≥", "–ü—Ä–∞–π—Å"],
]

def keyboard():
    return ReplyKeyboardMarkup(MENU_BUTTONS, resize_keyboard=True)

# === –ü–†–ò–í–ï–¢–°–¢–í–ò–ï ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = MSG.get("start", "–ü—Ä–∏–≤–µ—Ç!") + "\n\n" + MSG.get("menu_hint", "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ üëá")
    await update.message.reply_text(text, parse_mode="Markdown", reply_markup=keyboard())

# === –†–û–£–¢–ï–† ===
async def route(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text_raw = update.message.text or ""
    user_text = user_text_raw.strip().lower()

    mapping = {
        "–æ–±—É—á–µ–Ω–∏–µ": "obuchenie",
        "—Ü–µ–Ω–Ω–æ—Å—Ç–∏": "cennosti",
        "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è": "tehnologiya",
        "—Ñ—Ä–∞–∑—ã": "frazy",
        "—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è": "filosofiya",
        "–æ –±—Ä–µ–Ω–¥–µ": "o_brende",
    }

    intros = {
        "–æ–±—É—á–µ–Ω–∏–µ": "üéì –£—á–∏—Ç—å—Å—è –≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ö–ª–µ–±–µ ‚Äî –∑–Ω–∞—á–∏—Ç —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –µ–≥–æ –¥—É—à—É.",
        "—Ü–µ–Ω–Ω–æ—Å—Ç–∏": "üíõ –¶–µ–Ω–Ω–æ—Å—Ç–∏ –ë—É–ª–∫–∏–ü–µ—á—å ‚Äî —ç—Ç–æ –∞—Ä–æ–º–∞—Ç –º–∞—Å–ª–∞, —Ç—ë–ø–ª—ã–µ —Ä—É–∫–∏ –∏ —á–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞:",
        "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è": "‚öôÔ∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è ‚Äî –Ω–∞—à —Ä–∏—Ç—É–∞–ª —Ä–µ–º–µ—Å–ª–∞. –ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –º—ã –¥–µ–ª–∞–µ–º —Ç–µ—Å—Ç–æ, –∫–∞–∫ –º—É–∑—ã–∫—É:",
        "—Ñ—Ä–∞–∑—ã": "üó£Ô∏è –ò–Ω–æ–≥–¥–∞ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∞–ø–ø–µ—Ç–∏—Ç. –í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã:",
        "—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è": "üåø –í–∫—É—Å –∫–∞–∫ –∏—Å–∫—É—Å—Å—Ç–≤–æ. –¢–∞–∫ –º—ã —á—É–≤—Å—Ç–≤—É–µ–º —Ö–ª–µ–±, —Ç–µ—Å—Ç–æ –∏ –∂–∏–∑–Ω—å:",
        "–æ –±—Ä–µ–Ω–¥–µ": "ü•ê –ë—É–ª–∫–∏–ü–µ—á—å ‚Äî –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–µ–∫–∞—Ä–Ω—è. –≠—Ç–æ –∏—Å—Ç–æ—Ä–∏—è –æ –ª—é–¥—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞—é—Ç —Å—á–∞—Å—Ç—å–µ –∏–∑ –º—É–∫–∏ –∏ –º–∞—Å–ª–∞:",
    }

    key = mapping.get(user_text)
    if key and key in MSG:
        intro = intros.get(user_text, "")
        text = f"{intro}\n\n{MSG[key]}\n\n_‚Äî –ú–∞–∫–∞—Ä –ú–∞–∫–∞—Ä—ã—á, –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ë—É–ª–∫–∏–ü–µ—á—å_ ü•ê"
        await update.message.reply_text(text, parse_mode="Markdown", reply_markup=keyboard())
        return

    if user_text in ("–∫–∞—Ç–∞–ª–æ–≥", "/catalog"):
        await catalog_cmd(update, context); return
    if user_text in ("–ø—Ä–∞–π—Å", "/price"):
        await price_cmd(update, context); return

    if user_text_raw.startswith("/ask") or user_text_raw.strip().endswith("?"):
        await ask_cmd(update, context); return

    if have_openai():
        await ask_cmd(update, context); return

    await update.message.reply_text(MSG.get("menu_hint", "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ üëá"), reply_markup=keyboard())

# === –ö–ê–¢–ê–õ–û–ì / –ü–†–ê–ô–° ===
def price_categories_keyboard() -> InlineKeyboardMarkup:
    if not PRICE:
        return InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–∞–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", callback_data="noop")]])
    buttons = [[InlineKeyboardButton(cat, callback_data=f"cat|{cat}")] for cat in PRICE.keys()]
    return InlineKeyboardMarkup(buttons)

async def price_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=price_categories_keyboard())

async def catalog_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–∞—Ç–∞–ª–æ–≥:", reply_markup=price_categories_keyboard())

async def cb_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        await query.answer()
    except Exception:
        pass

    data = (query.data or "")
    if data.startswith("cat|"):
        cat = data.split("|", 1)[1]
        items = PRICE.get(cat, [])
        if not items:
            await query.edit_message_text(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{cat}* –ø–æ–∫–∞ –ø—É—Å—Ç–æ.", parse_mode="Markdown")
            return
        kb = [[InlineKeyboardButton(item["name"], callback_data=f"item|{cat}|{i}")]
              for i, item in enumerate(items)]
        await query.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{cat}*", parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(kb))
        return

    if data.startswith("item|"):
        _, cat, idx = data.split("|")
        idx = int(idx)
        item = PRICE.get(cat, [])[idx]
        name = item.get("name", "–¢–æ–≤–∞—Ä")
        price = item.get("price", "‚Äî")
        desc = item.get("desc", "")
        image = item.get("image")
        caption = f"{name}\n–¶–µ–Ω–∞: {price} ‚ÇΩ\n{desc}".strip()

        if image:
            path = MEDIA_DIR / image
            if path.exists():
                try:
                    with open(path, "rb") as f:
                        await query.message.reply_photo(photo=InputFile(f), caption=caption)
                except Exception as e:
                    await query.message.reply_text(f"{caption}\n(–û—à–∏–±–∫–∞: {e})")
            else:
                await query.message.reply_text(f"{caption}\n(–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image})")
        else:
            await query.message.reply_text(caption)

        await query.message.reply_text(
            f"–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{cat}*:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"cat|{cat}")]]),
        )
        return

# === –£–ú–ù–´–ï –û–¢–í–ï–¢–´ ===
def rule_based_answer(text: str) -> str:
    t = text.lower()
    if "–∫–∞–∫ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å" in t or "—á—Ç–æ —Å–∫–∞–∑–∞—Ç—å" in t or "–∫–∞–∫ –ø—Ä–æ–¥–∞—Ç—å" in t:
        return ("–ì–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç–æ –∏ —Å —Ç–µ–ø–ª–æ–º: –º–∞—Å–ª–æ 82,5%, —Ä—É—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –¥–æ–ª–≥–∏–π –æ—Ç–¥—ã—Ö —Ç–µ—Å—Ç–∞, —Ö—Ä—É—Å—Ç. "
                "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ü–æ–ø—Ä–æ–±—É–π—Ç–µ ‚Äî —Ö—Ä—É—Å—Ç–∏—Ç –∫–∞–∫ —Ñ—Ä–∞–Ω—Ü—É–∑, –Ω–æ —Å –¥—É—à–æ–π –°–∏–±–∏—Ä–∏.¬ª")
    if "—Ü–µ–Ω–∞" in t or "–ø—Ä–∞–π—Å" in t:
        return "–û—Ç–∫—Ä–æ–π /price ‚Äî —Ç–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ü–µ–Ω—ã."
    if "—Å–æ—Å—Ç–∞–≤" in t:
        return "–ß–∏—Å—Ç—ã–π —Å–æ—Å—Ç–∞–≤: —Å–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ 82,5%, –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –º—É–∫–∞ –ú–∞–Ω–∏—Ç–æ–±–∞, –±–µ–∑ —É–ª—É—á—à–∏—Ç–µ–ª–µ–π."
    if "–∑–∞–º–æ—Ä–æ–∑–∫–∞" in t:
        return "–†–µ–º–µ—Å–ª–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è, –±–µ–∑ –∫–æ–Ω—Å–µ—Ä–≤–∞–Ω—Ç–æ–≤. –õ—É—á—à–µ ‚Äî —Å–≤–µ–∂–∏–º."
    return "–Ø —Ä—è–¥–æ–º, –ø–æ–¥—Å–∫–∞–∂—É –ø—Ä–æ –≤–∫—É—Å, —Å–æ—Å—Ç–∞–≤, –ø–æ–¥–∞—á—É. –°–ø—Ä–æ—Å–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ö–∞–∫ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ –∫—Ä—É–∞—Å—Å–∞–Ω —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π —Å–ø–µ—à–∏—Ç?¬ª"

# === LLM ===
def have_openai() -> bool:
    return bool(os.getenv("OPENROUTER_API_KEY"))

async def ai_answer_llm(prompt: str) -> str:
    try:
        from openai import OpenAI
        api_key = os.getenv("OPENROUTER_API_KEY")
        if not api_key:
            return rule_based_answer(prompt)

        client = OpenAI(base_url="https://openrouter.ai/api/v1", api_key=api_key)

        resp = client.chat.completions.create(
            model="openrouter/auto",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –ú–∞–∫–∞—Ä –ú–∞–∫–∞—Ä—ã—á, –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ë—É–ª–∫–∏–ü–µ—á—å. –ì–æ–≤–æ—Ä–∏ –ø–æ-–¥–æ–±—Ä–æ–º—É –∏ —Å–æ –≤–∫—É—Å–æ–º."},
                {"role": "user", "content": prompt},
            ],
            max_tokens=400,
            temperature=0.7,
            timeout=20,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"‚ö†Ô∏è OpenRouter error: {e}")
        return rule_based_answer(prompt)

# === –£–ú–ù–´–ô –û–¢–í–ï–¢ ===
async def ask_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text or ""
    parts = text.split(" ", 1)
    question = parts[1] if len(parts) > 1 else "–ü–æ–¥—Å–∫–∞–∂–∏, –∫–∞–∫ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –∫—Ä—É–∞—Å—Å–∞–Ω–µ."
    reply = await ai_answer_llm(question) if have_openai() else rule_based_answer(question)
    await update.message.reply_text(reply + "\n\n_‚Äî –ú–∞–∫–∞—Ä –ú–∞–∫–∞—Ä—ã—á ü•ê_", parse_mode="Markdown")

# === MAIN ===
async def run_bot():
    token = "7560052787:AAFF_Hi8-FLhVEu3_V5nziBh9qPMtuJsoSg"
    app = Application.builder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("price", price_cmd))
    app.add_handler(CommandHandler("catalog", catalog_cmd))
    app.add_handler(CommandHandler("ask", ask_cmd))
    app.add_handler(CallbackQueryHandler(cb_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, route))

    print("ü§ñ –ú–∞–∫–∞—Ä –ú–∞–∫–∞—Ä—ã—á –∑–∞–ø—É—â–µ–Ω. –†–∞–±–æ—Ç–∞–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ 24/7.")
    await app.run_polling(
        allowed_updates=Update.ALL_TYPES,
        timeout=30,
        poll_interval=2,
        drop_pending_updates=True,
        stop_signals=None  # –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥ systemd
    )

if __name__ == "__main__":
    while True:
        try:
            asyncio.run(run_bot())
        except Exception as e:
            logger.error(f"üí• –ë–æ—Ç —É–ø–∞–ª: {e}, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫...")
            asyncio.run(asyncio.sleep(10))
